-- SetupConfig: {}
create transformer on CK.sZoneUserRemove
as
begin
	add parameter @AutoRemoveUserFromChildZone bit = 1;

	inject "
	if @AutoRemoveUserFromChildZone = 1
	begin
		-- Retrieves the parent hierarchical identifier.
		declare @ParentHID hierarchyid;
		select @ParentHID = z.HierarchicalId from CK.tZone z where z.ZoneId = @ZoneId;
		-- Removes the user from child zones from deepest to direct children.
		declare @ChildZoneId int;
		declare @CZone cursor;
		set @CZone = cursor local fast_forward for 
						select z.ZoneId
							from CK.tZone z with(serializable)
							where z.HierarchicalId.IsDescendantOf( @ParentHID ) = 1
							order by z.HierarchicalId.GetLevel() desc;
		open @CZone;
		fetch from @CZone into @ChildZoneId;
		while @@FETCH_STATUS = 0
		begin
			if @ChildZoneId <> @ZoneId
			begin
				exec CK.sZoneUserRemove @ActorId, @ChildZoneId, @UserId, 0;
			end
			fetch next from @CZone into @ChildZoneId;
		end
		deallocate @CZone;
	end" 
	into "PreZoneUserRemove";

	-- This ensures that Zones are skipped while removing the
	-- user from the zones's groups.
	-- This enforces @AutoRemoveUserFromChildZone semantics and
	-- avoids call recursion since sGroupUserRemove calls sZoneUserRemove 
	-- when the group is a zone.
	in single statement {set @CGroup = cursor}
    begin
	    in first part {select}
	    begin
		    inject "not exists(select * from CK.tZone where ZoneId = a.GroupId) and " before single {g.ZoneId = @ZoneId};
	    end
    end


end

