-- SetupConfig: {}
create transformer on CK.sZoneDestroy
as
begin
	add parameter @DestroySubZone bit = null;

	inject "
		if @DestroySubZone is null set @DestroySubZone = @ForceDestroy;
	" before single "--[beginsp]";

		inject "
	if @DestroySubZone = 1
	begin
		-- Retrieves the parent hierarchical identifier.
		declare @ParentHID hierarchyid;
		select @ParentHID = z.HierarchicalId from CK.tZone z where z.ZoneId = @ZoneId;
		if @ParentHID is null throw 50000, 'Zone.UnexistingZone', 1;
		-- Destroys the child zones from deepest to direct children.
		declare @ChildZoneId int;
		declare @CZone cursor;
		set @CZone = cursor local fast_forward for 
						select z.ZoneId
							from CK.tZone z with(serializable)
							where z.HierarchicalId.IsDescendantOf( @ParentHID ) = 1
							order by z.HierarchicalId.GetLevel() desc;
		open @CZone;
		fetch from @CZone into @ChildZoneId;
		while @@FETCH_STATUS = 0
		begin
			if @ChildZoneId <> @ZoneId
			begin
				exec CK.sZoneDestroy @ActorId, @ChildZoneId, @ForceDestroy, 0;
			end
			fetch next from @CZone into @ChildZoneId;
		end
		deallocate @CZone;
	end" 
	into "PreZoneDestroy";

end

